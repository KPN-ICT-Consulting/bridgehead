#/*
# * Copyright (c) 2018 JP-L, https://www.jp-l.org/
# *
# * Permission is hereby granted, free of charge, to any person obtaining
# * a copy of this software and associated documentation files (the
# * "Software"), to deal in the Software without restriction, including
# * without limitation the rights to use, copy, modify, merge, publish,
# * distribute, sublicense, and/or sell copies of the Software, and to
# * permit persons to whom the Software is furnished to do so, subject to
# * the following conditions:
# *
# * The above copyright notice and this permission notice shall be
# * included in all copies or substantial portions of the Software.
#
# * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#*/

# Language setting
language: go

# Set language version. This is only required if you use the default Shippable image for your build
go:
  - 1.11

# use this to control what branches get built.
# http://docs.shippable.com/ci/advancedOptions/branches/
branches:
  only:
    - master
    - releases
    - development

# Specify which services you need. This is only valid if you use the default Shippable image for your build
#services:

env:
  global:
    - TEST_RESULTS_DIR=$SHIPPABLE_REPO_DIR/shippable/testresults
    - CODE_COVERAGE_DIR=$SHIPPABLE_REPO_DIR/shippable/codecoverage
    - TESTS_LOC_DIR=$SHIPPABLE_REPO_DIR/src/test
    - MOD_LOC=$SHIPPABLE_REPO_DIR/node_modules/.bin/

#matrix:

# The build configuration
build:
  # commands in this section run on your build machine and not inside your CI container.
  pre_ci:
    - echo "==== Prepare environment ====" &&
      mkdir -p $TEST_RESULTS_DIR && 
      mkdir -p $CODE_COVERAGE_DIR && 
      pushd $TESTS_LOC_DIR;
      if [ "$BRANCH" == "development" ]; then
           echo "==== Development branch ====";
      elif [ "$BRANCH" == "release" ]; then
           echo "==== Release branch ====";
      elif [ "$BRANCH" == "master" ]; then
           echo "==== Master branch ====";
      else
           echo "==== Unknown branch ====";
      fi
    - echo "==== DEBUG List all environment variables ====" && printenv

  # Probably not needed, but keep this code here until proven
  #pre_ci_boot:
  #  image_name: $CI_CONTAINER
  #  image_tag: $CI_CONTAINER_VERSION
  #  pull: true
  #  options: '--privileged=false --net=bridge -e FOO=true -e BOO=false'

  # commands in this section run inside your CI container. In addition, any commands such as ls, 
  # in this section can be used to skip default processing for CI.
  ci:
    - echo "==== Validate the scripts ====" &&
      terraform init;
      if [ "$BRANCH" != "master" ]; then
           echo "==== Tests and Quality control for the scripts ====";  
           echo "TODO";
      elif [ "$BRANCH" == "master" ]; then
           echo "==== do somthing smart here ====";
      else
           echo "==== Unknown branch ====";
      fi
    - echo "==== CI completed. Move to post CI ===="

  post_ci:
    - echo "==== Post CI tasks ==== ";
      if [ "$BRANCH" == "releases" ]; then
           echo "==== Maybe needed ==== ";
      elif [ "$BRANCH" == "master" ]; then
           echo "==== Maybe needed ==== ";
      else
           echo "==== No Post CI tasks required ====";
      fi

  on_success:
    - if [ "$BRANCH" == "development" ]; then
           echo "==== Release the code ====";
           git checkout -b releases;
           git merge --no-ff development;
           git commit -a -m "Development merged into releases"
      elif [ "$BRANCH" == "releases" ]; then
           echo "==== do something? ====";
      elif [ "$BRANCH" == "master" ]; then
           echo "==== Publish the next Release ====";   
           git tag -a "$RELEASE_TAG";
      else
           echo "==== Unknown branch ====";
      fi

  on_failure:
    - echo "==== Build failed ===="
    
  cache: false

integrations:
# If you are using integrations, you'll need to set it up in two places. Subscription settings & here in this section of the yml.
    notifications:
        - integrationName: Slack
          type: slack
          recipients:
            - "#bridgehead"
          branches:
            only:
                - master
                - release
                - development
          on_success: always
          on_failure: always
          on_pull_request: always
          on_start: always

   # hub:
   #     - integrationName: AWS
   #       type: ecr
   #       region: eu-west-1
#          agent_only:
#          branches:

    generic:     
        - integrationName: BridgeheadValues

    
#### END CI CONFIG

#### RESOURCES CONFIG (GLOBAL ACROSS SUBSCRIPTION)
resources:
    # Params
    #- name: CI_CONTAINER_VERSION
    #  type: params
    #  versionTemplate:
    #    params:
    #      CI_CONTAINER_VERSION: '1.0'
        
    # Job resources
    #- name: scripts-from-srcRepo
    #  type: gitRepo
    #  integration: GitHub
    #  versionTemplate:
    #    sourceName: "KPN-ICT-Consulting/bridgehead"
    #    branch: "releases"

   #### INTEGRATIONS ####
   # - name: aws-Integration
   #   type: integration
   #   integration: AWS
      
    - name: BridgeheadValues
      type: integration
      integration: BridgeheadValues
            
    #### NOTIFICATIONS ####
    - name: Slack
      type: notification
      integration: Slack
      versionTemplate:
        recipients:
            - "#bridgehead"

#### END RESOURCES CONFIG

#### JOBS CONFIG (GLOBAL ACROSS SUBSCRIPTION)
# ****************************************************************************************************************
# * Build Release branch after successful merge from Development branch                                          *
# *                    ------------- Then ------------------------------>                                        *
# *                                   A. Create a Manifest                                                       *
# *                                   B. setup Staging environment                                               *
# *                                   ------------- Then ------------------------------>                         *
# *                                                 C. Deploy Image                                              *
# *                                                 D. Run QA tests                                              *
# *                                                 E. Merge Release branch into Master branch                   *
# *                                                 ------------- Then ------------------------------>           *
# *                                                               F. Build Master branch                         *
# *                                                               G. Publish to DockerHub after successful build *
# ****************************************************************************************************************

jobs:
    # ****************************************************************************************************************
    # * Build Release branch after successful merge from Development branch                                          *
    # *                    ------------- Then ------------------------------>                                        *
    # *                                   A. Create a Manifest                                                       *
    # *                                   B. setup Staging environment                                               *
    # ****************************************************************************************************************
#    - name: bridgehead_runCI
#      type: runCI
#      steps:
#        - IN: IMAGE
#        - IN: IMAGE_VERSION
        
#    - name: configureEnvironment
#      type: runSh
#      triggerMode: serial
#      dependencyMode: strict   # optional
#      on_start:
#        - NOTIFY: Slack
#      steps:
#        - IN: bridgehead_runCI
#        - IN: scripts-from-srcRepo
#        - TASK:
#            name: setupStagingEnvironment
#            runtime:                  # optional
#              options:
#                #imageName: $CI_CONTAINER
#                imageName: drydock/u16javall
#                imageTag: 'v6.1.4' #'1.0'
#                pull: false
#                options: '--privileged=false --net=bridge -e FOO=true -e BOO=false'
#            script:
#              - echo "==== TODO ===="
#      on_failure:
#        - NOTIFY: Slack
        
#### END JOBS CONFIG